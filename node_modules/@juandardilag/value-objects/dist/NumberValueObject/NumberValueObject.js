"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NumberValueObject = void 0;
const BooleanValueObject_1 = require("../BooleanValueObject/BooleanValueObject");
const ValueObject_1 = require("../ValueObject/ValueObject");
const NumberValueObjectOperator_1 = require("./NumberValueObjectOperator");
const NumberValueObjectTyper_1 = require("./NumberValueObjectTyper");
const NumberValueObjectValidator_1 = require("./NumberValueObjectValidator");
class NumberValueObject extends ValueObject_1.ValueObject {
    constructor(_value, _validator) {
        super(new NumberValueObjectOperator_1.NumberValueObjectOperator(), new NumberValueObjectTyper_1.NumberValueObjectTyper(), _validator || new NumberValueObjectValidator_1.NumberValueObjectValidator(), _value);
    }
    empty() {
        return new NumberValueObject(0);
    }
    static zero() {
        return new NumberValueObject(0);
    }
    equalsTo(other) {
        return new BooleanValueObject_1.BooleanValueObject(this._value === other._value);
    }
    differsFrom(other) {
        return new BooleanValueObject_1.BooleanValueObject(this._value !== other._value);
    }
    isBiggerThan(other) {
        return new BooleanValueObject_1.BooleanValueObject(this._value > other._value);
    }
    isLessThan(other) {
        return new BooleanValueObject_1.BooleanValueObject(this._value < other._value);
    }
    isPositive() {
        return new BooleanValueObject_1.BooleanValueObject(this._value > 0);
    }
    isNegative() {
        return new BooleanValueObject_1.BooleanValueObject(this._value < 0);
    }
    isZero() {
        return new BooleanValueObject_1.BooleanValueObject(this._value === 0);
    }
    isBiggerOrEqualThan(other) {
        return new BooleanValueObject_1.BooleanValueObject(this._value > other._value).or(this.equalsTo(other));
    }
    substract(value) {
        return new NumberValueObject(this._value - value._value);
    }
    times(value) {
        return new NumberValueObject(this._value * value._value);
    }
    static from(value) {
        return new NumberValueObject(value._value);
    }
}
exports.NumberValueObject = NumberValueObject;
