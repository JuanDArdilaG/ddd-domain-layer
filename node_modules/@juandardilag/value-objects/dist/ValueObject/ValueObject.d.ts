import { IOperable } from "./IOperable";
import { ITypable } from "./ITypable";
import { IValidatable } from "./IValidatable";
import { IValueObject } from "./IValueObject";
export declare abstract class ValueObject<T extends Object> implements IValueObject<T> {
    private _operable;
    private _typable;
    private _validatable;
    protected _value: T;
    constructor(_operable: IOperable<T>, _typable: ITypable<T>, _validatable: IValidatable<T>, _value: T);
    get value(): T;
    set value(value: T);
    equal(other: IValueObject<Object>): boolean;
    is(o: T): boolean;
    toString(): string;
    toType(val: IValueObject<T>): T;
    fromType(val: T): IValueObject<T>;
    validate(val: T): Error | void;
    add(other: IValueObject<T>): IValueObject<T>;
}
